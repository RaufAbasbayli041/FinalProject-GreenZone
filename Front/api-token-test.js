// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏ —Ç–æ–∫–µ–Ω–∞
console.log('üåê –¢–µ—Å—Ç API –∏ —Ç–æ–∫–µ–Ω–∞');

async function testAPIWithToken() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —Ç–æ–∫–µ–Ω–æ–º:');
  
  const token = localStorage.getItem('auth_token');
  const API_BASE = 'https://localhost:7100';
  
  console.log('API Base:', API_BASE);
  console.log('Has Token:', !!token);
  
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç');
    return;
  }
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
  try {
    console.log('\nüì° –¢–µ—Å—Ç 1: GET /api/Product');
    const response = await fetch(`${API_BASE}/api/Product`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('Response status:', response.status);
    console.log('Response headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', data.length, '–ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    } else {
      const text = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', text);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }
  
  // –¢–µ—Å—Ç 2: GET –∫–æ—Ä–∑–∏–Ω—ã
  try {
    console.log('\nüì° –¢–µ—Å—Ç 2: GET /api/Basket/test-customer-id');
    const response = await fetch(`${API_BASE}/api/Basket/test-customer-id`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('Response status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data);
    } else {
      const text = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã:', text);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã:', error);
  }
}

async function testTokenValidation() {
  console.log('\nüîê –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:');
  
  const token = localStorage.getItem('auth_token');
  
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  try {
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT');
      return;
    }
    
    const payload = JSON.parse(atob(parts[1]));
    const currentTime = Math.floor(Date.now() / 1000);
    
    console.log('Token payload:', payload);
    console.log('Current time:', currentTime);
    console.log('Token exp:', payload.exp);
    console.log('Is expired:', payload.exp ? payload.exp < currentTime : 'unknown');
    
    if (payload.exp && payload.exp < currentTime) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
    } else {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:', error);
  }
}

function checkNetworkConnectivity() {
  console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  
  const API_BASE = 'https://localhost:7100';
  
  fetch(`${API_BASE}/api/Product`)
    .then(response => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
    })
    .catch(error => {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('- –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.log('- –ù–µ–≤–µ—Ä–Ω—ã–π URL');
      console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å CORS');
      console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.apiTest = {
  testAPIWithToken,
  testTokenValidation,
  checkNetworkConnectivity
};

console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('- apiTest.testAPIWithToken() - –¢–µ—Å—Ç API —Å —Ç–æ–∫–µ–Ω–æ–º');
console.log('- apiTest.testTokenValidation() - –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
console.log('- apiTest.checkNetworkConnectivity() - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testTokenValidation();
checkNetworkConnectivity();
