import type { Basket, BasketItemsCreateDto, BasketItemsUpdateDto } from '@/lib/types'

const BASE = process.env.NEXT_PUBLIC_API_URL || 'https://localhost:7100'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function getAuthToken(): string | null {
  if (typeof window === 'undefined') {
    console.log('getAuthToken: window is undefined (SSR)')
    return null
  }
  
  const token = localStorage.getItem('auth_token')
  console.log('getAuthToken: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage:', {
    hasToken: !!token,
    tokenPreview: token ? token.substring(0, 30) + '...' : '–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞',
    tokenLength: token ? token.length : 0,
    localStorageKeys: Object.keys(localStorage),
    localStorageSize: localStorage.length
  })
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º)
  if (token) {
    console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤')
    return token
  }
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  const authState = localStorage.getItem('authState')
  if (authState) {
    try {
      const parsed = JSON.parse(authState)
      if (parsed.isAuthenticated && parsed.user) {
        console.log('üîß –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω')
        const tempToken = createTempToken(parsed.user)
        localStorage.setItem('auth_token', tempToken)
        console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        return tempToken
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ authState:', error)
    }
  }
  
  console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
function createTempToken(user: any): string {
  const payload = {
    sub: user.id || 'temp-user-id',
    email: user.email || 'temp@example.com',
    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role': user.role || 'Customer',
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
    iat: Math.floor(Date.now() / 1000),
    iss: 'GreenZoneAPI',
    aud: 'GreenZoneClient'
  }
  
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }))
  const payloadEncoded = btoa(JSON.stringify(payload))
  const signature = btoa('temp-signature')
  
  return `${header}.${payloadEncoded}.${signature}`
}

async function fetchJSON<T = any>(path: string, opts: RequestInit = {}): Promise<T> {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const token = getAuthToken()
  
  console.log('fetchJSON: –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', {
    path,
    method: opts.method || 'GET',
    hasToken: !!token,
    tokenPreview: token ? token.substring(0, 30) + '...' : '–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞'
  })
  
  // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
  if (path.startsWith('http')) {
    const headers: Record<string, string> = { 'Content-Type': 'application/json' }
    if (token) {
      headers['Authorization'] = `Bearer ${token}`
    }
    
    console.log('fetchJSON: –ø–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å:', {
      url: path,
      headers,
      hasAuthHeader: !!headers['Authorization']
    })
    
    const res = await fetch(path, { 
      ...opts, 
      headers: { ...headers, ...(opts.headers || {}) } 
    })
    if (!res.ok) {
      const text = await res.text().catch(() => '')
      console.error('fetchJSON: –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ URL –∑–∞–ø—Ä–æ—Å–∞:', {
        status: res.status,
        statusText: res.statusText,
        responseText: text
      })
      throw new Error(`Request failed ${res.status} ${res.statusText}: ${text}`)
    }
    return (await res.json()) as T
  }

  // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π URL –∫ –±—ç–∫–µ–Ω–¥—É
  const baseClean = BASE.replace(/\/+$/, '') // —É–±–∏—Ä–∞–µ–º trailing slash
  const pathClean = path.replace(/^\/+/, '') // —É–±–∏—Ä–∞–µ–º leading slash
  const url = `${baseClean}/${pathClean}`

  const headers: Record<string, string> = { 'Content-Type': 'application/json' }
  if (token) {
    headers['Authorization'] = `Bearer ${token}`
  }

  console.log('fetchJSON: –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É:', {
    url,
    method: opts.method || 'GET',
    headers,
    hasAuthHeader: !!headers['Authorization'],
    requestBody: opts.body ? (typeof opts.body === 'string' ? opts.body.substring(0, 200) + '...' : '–Ω–µ —Å—Ç—Ä–æ–∫–∞') : '–Ω–µ—Ç —Ç–µ–ª–∞'
  })

  const res = await fetch(url, { 
    ...opts, 
    credentials: 'include', 
    headers: { ...headers, ...(opts.headers || {}) } 
  })
  
  if (!res.ok) {
    const text = await res.text().catch(() => '')
    console.error('fetchJSON: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±—ç–∫–µ–Ω–¥—É:', {
      url,
      status: res.status,
      statusText: res.statusText,
      responseText: text,
      hasToken: !!token
    })
    throw new Error(`Request failed ${res.status} ${res.statusText}: ${text}`)
  }
  
  const result = await res.json()
  console.log('fetchJSON: —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', {
    url,
    status: res.status,
    resultPreview: JSON.stringify(result).substring(0, 200) + '...'
  })
  
  return result as T
}

export async function getBasketByCustomerId(customerId: string): Promise<Basket> {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è customerId:', customerId)
    const basket = await fetchJSON<Basket>(`/api/Basket/${customerId}`)
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞:', basket)
    return basket
  } catch (e: any) {
    console.log('API –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    
    // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404 –∏–ª–∏ 500), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
    if (e.message.includes('404') || e.message.includes('500') || e.message.includes('Basket not found')) {
      console.log('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É')
      return {
        id: '',
        customerId: customerId,
        basketItems: [],
        totalAmount: 0,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        isDeleted: false
      }
    }
    
    throw e
  }
}

export async function addItemsToBasket(customerId: string, items: BasketItemsCreateDto): Promise<void> {
  try {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', { customerId, items })
    await fetchJSON(`/api/Basket/${customerId}/items`, { 
      method: 'POST', 
      body: JSON.stringify(items) 
    })
    console.log('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É: ${e.message}`)
  }
}

export async function removeItemsFromBasket(customerId: string, productId: string, quantity: number): Promise<void> {
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', { customerId, productId, quantity })
    await fetchJSON(`/api/Basket/${customerId}/items?productId=${productId}&quantity=${quantity}`, { 
      method: 'DELETE' 
    })
    console.log('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ${e.message}`)
  }
}

export async function clearBasket(customerId: string): Promise<void> {
  try {
    console.log('–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è customerId:', customerId)
    await fetchJSON(`/api/Basket/${customerId}`, { method: 'DELETE' })
    console.log('–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É: ${e.message}`)
  }
}

export async function updateItemsInBasket(customerId: string, items: BasketItemsUpdateDto): Promise<void> {
  try {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', { customerId, items })
    await fetchJSON(`/api/Basket/${customerId}/items`, { 
      method: 'PUT', 
      body: JSON.stringify(items) 
    })
    console.log('–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${e.message}`)
  }
}

