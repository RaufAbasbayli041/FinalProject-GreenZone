import type { 
  Product, 
  ProductCreateDto, 
  ProductUpdateDto, 
  ProductSearchResult,
  LoginDto,
  RegisterDto,
  AuthResult,
  Category,
  CategoryCreateDto,
  CategoryUpdateDto,
  Basket,
  BasketItemsCreateDto,
  BasketItemsUpdateDto,
  Customer,
  CustomerUpdateDto,
  Order,
  OrderCreateDto,
  OrderUpdateDto,
  Delivery,
  DeliveryCreateDto,
  DeliveryReadDto,
  DeliveryUpdateDto,
  DeliveryStatus,
  DeliveryStatusCreateDto,
  DeliveryStatusReadDto,
  DeliveryStatusUpdateDto,
  DeliveryStatusType,
  Payment,
  PaymentMethod,
  PaymentStatus,
  ProductDocuments
} from '@/lib/types'
import { getCustomerByUserId } from './customer-api'

const BASE = process.env.NEXT_PUBLIC_API_URL || 'https://localhost:7100'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞
function isTokenValid(token: string): boolean {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:', {
      tokenPreview: token.substring(0, 50) + '...',
      tokenLength: token.length
    })
    
    const parts = token.split('.')
    console.log('–ß–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞:', {
      partsCount: parts.length,
      partsLengths: parts.map(p => p.length)
    })
    
    if (parts.length !== 3) {
      console.log('–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 3 —á–∞—Å—Ç–∏')
      return false
    }
    
    const payload = JSON.parse(atob(parts[1]))
    const currentTime = Math.floor(Date.now() / 1000)
    
    console.log('Payload —Ç–æ–∫–µ–Ω–∞:', {
      exp: payload.exp,
      currentTime,
      isExpired: payload.exp ? payload.exp < currentTime : false
    })
    
    // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–æ –µ—Å—Ç—å userId, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º
    if (payload.exp && payload.exp < currentTime) {
      console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userId:', payload.sub)
      if (payload.sub) {
        console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–æ –µ—Å—Ç—å userId - —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã')
        return true // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å userId
      }
      return false
    }
    
    console.log('–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', {
      exp: payload.exp,
      currentTime,
      expired: false,
      userId: payload.sub || payload.userId
    })
    
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
function getAuthToken(): string | null {
  if (typeof window === 'undefined') return null
  
  const token = localStorage.getItem('auth_token')
  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', {
    hasToken: !!token,
    tokenPreview: token ? token.substring(0, 20) + '...' : '–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞',
    localStorageKeys: Object.keys(localStorage)
  })
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
  if (token) {
    if (isTokenValid(token)) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω')
      return token
    } else {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã')
      // –ù–µ —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å—Ä–∞–∑—É, –¥–∞–µ–º —à–∞–Ω—Å API —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º
      return token
    }
  }
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  const authState = localStorage.getItem('authState')
  if (authState) {
    try {
      const parsed = JSON.parse(authState)
      if (parsed.isAuthenticated && parsed.user) {
        console.log('üîß –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω')
        const tempToken = createTempToken(parsed.user)
        localStorage.setItem('auth_token', tempToken)
        console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        return tempToken
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ authState:', error)
    }
  }
  
  console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
function createTempToken(user: any): string {
  const payload = {
    sub: user.id || 'temp-user-id',
    email: user.email || 'temp@example.com',
    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role': user.role || 'Customer',
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
    iat: Math.floor(Date.now() / 1000),
    iss: 'GreenZoneAPI',
    aud: 'GreenZoneClient'
  }
  
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }))
  const payloadEncoded = btoa(JSON.stringify(payload))
  const signature = btoa('temp-signature')
  
  return `${header}.${payloadEncoded}.${signature}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
export function getUserIdFromToken(): string | null {
  const token = getAuthToken()
  if (!token) return null
  
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (—Ç–æ–ª—å–∫–æ payload —á–∞—Å—Ç—å)
    const payload = JSON.parse(atob(token.split('.')[1]))
    return payload.userId || payload.sub || null
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è customerId –ø–æ userId
export async function getCustomerIdByUserId(userId: string): Promise<string | null> {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ customerId –¥–ª—è userId:', userId)
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º userId –∫–∞–∫ customerId
    // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ userId = customerId
    const customer = await getCustomerByUserId(userId)
    
    if (customer) {
      console.log('–ù–∞–π–¥–µ–Ω customerId:', customer.id)
      return customer.id
    } else {
      console.log('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º userId –∫–∞–∫ customerId:', userId)
      return userId
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è customerId:', error)
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º userId –∫–∞–∫ customerId
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∫–∞–∫ customerId –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', userId)
    return userId
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ userId (–∏—Å–ø–æ–ª—å–∑—É–µ–º userId –Ω–∞–ø—Ä—è–º—É—é)
export async function getBasketByUserId(userId: string): Promise<Basket | null> {
  try {
    return await getBasketByCustomerId(userId)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ userId:', error)
    return null
  }
}

async function fetchJSON<T = any>(path: string, opts: RequestInit = {}): Promise<T> {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const token = getAuthToken()
  
  // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
  if (path.startsWith('http')) {
    const headers: Record<string, string> = { 'Content-Type': 'application/json' }
    if (token) {
      headers['Authorization'] = `Bearer ${token}`
    }
    
    const res = await fetch(path, { 
      ...opts, 
      headers: { ...headers, ...(opts.headers || {}) } 
    })
    if (!res.ok) {
      const text = await res.text().catch(() => '')
      throw new Error(`Request failed ${res.status} ${res.statusText}: ${text}`)
    }
    return (await res.json()) as T
  }

  // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π URL –∫ –±—ç–∫–µ–Ω–¥—É
  const baseClean = BASE.replace(/\/+$/, '') // —É–±–∏—Ä–∞–µ–º trailing slash
  const pathClean = path.replace(/^\/+/, '') // —É–±–∏—Ä–∞–µ–º leading slash
  const url = `${baseClean}/${pathClean}`

  const headers: Record<string, string> = { 'Content-Type': 'application/json' }
  if (token) {
    headers['Authorization'] = `Bearer ${token}`
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
      url,
      method: opts.method || 'GET',
      hasToken: !!token,
      tokenPreview: token.substring(0, 20) + '...',
      authorizationHeader: headers['Authorization'].substring(0, 30) + '...',
      allHeaders: headers,
      requestBody: opts.body ? (typeof opts.body === 'string' ? opts.body.substring(0, 200) + '...' : '–Ω–µ —Å—Ç—Ä–æ–∫–∞') : '–Ω–µ—Ç —Ç–µ–ª–∞'
    })
  } else {
    console.log('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', url)
  }

  const res = await fetch(url, { 
    ...opts, 
    credentials: 'include', 
    headers: { ...headers, ...(opts.headers || {}) } 
  })
  
  if (!res.ok) {
    const text = await res.text().catch(() => '')
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      url,
      status: res.status,
      statusText: res.statusText,
      responseText: text,
      headers: Object.fromEntries(res.headers.entries())
    })
    throw new Error(`Request failed ${res.status} ${res.statusText}: ${text}`)
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  const contentType = res.headers.get('content-type')
  if (!contentType || !contentType.includes('application/json')) {
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    return {} as T
  }
  
  const text = await res.text()
  if (!text.trim()) {
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    return {} as T
  }
  
  try {
    return JSON.parse(text) as T
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error)
    throw new Error(`Invalid JSON response: ${text}`)
  }
}

// ===== PRODUCT API =====
export async function fetchProducts(): Promise<Product[]> {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [products, categories] = await Promise.all([
      fetchJSON<Product[]>('/api/Product'),
      fetchJSON<Category[]>('/api/Category')
    ])
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const categoryMap = new Map(categories.map(cat => [cat.id, cat]))
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
    const productsWithCategories = products.map(product => ({
      ...product,
      category: categoryMap.get(product.categoryId)
    }))
    
    return productsWithCategories
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:', error)
    throw error
  }
}

export async function fetchProductById(id: string): Promise<Product> {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [product, categories] = await Promise.all([
      fetchJSON<Product>(`/api/Product/${id}`),
      fetchJSON<Category[]>('/api/Category')
    ])
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const category = categories.find(cat => cat.id === product.categoryId)
    
    return {
      ...product,
      category
    }
  } catch (error: any) {
    console.log('API –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}

export async function createProduct(productData: ProductCreateDto): Promise<Product> {
  try {
    return await fetchJSON<Product>('/api/Product', {
      method: 'POST',
      body: JSON.stringify(productData)
    })
  } catch (e: any) {
    console.log('API —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateProduct(id: string, productData: ProductUpdateDto): Promise<Product> {
  try {
    return await fetchJSON<Product>(`/api/Product/${id}`, {
      method: 'PUT',
      body: JSON.stringify(productData)
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteProduct(id: string): Promise<boolean> {
  try {
    await fetchJSON(`/api/Product/${id}`, { method: 'DELETE' })
    return true
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function uploadProductImage(id: string, imageFile: File): Promise<boolean> {
  try {
    const formData = new FormData()
    formData.append('Image', imageFile)

    await fetchJSON(`/api/Product/upload-image/${id}`, {
      method: 'POST',
      body: formData
    })
    return true
  } catch (e: any) {
    console.log('API –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function searchProducts(keyword: string, page: number = 1, pageSize: number = 10): Promise<ProductSearchResult> {
  try {
    return await fetchJSON<ProductSearchResult>(`/api/Product/search?keyword=${encodeURIComponent(keyword)}&page=${page}&pageSize=${pageSize}`)
  } catch (e: any) {
    console.log('API –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getProductById(id: string): Promise<Product> {
  try {
    return await fetchJSON<Product>(`/api/Product/${id}`)
  } catch (e: any) {
    console.log('API –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function fetchProductsByCategory(categoryId: string, page: number = 1, pageSize: number = 10): Promise<ProductSearchResult> {
  try {
    return await fetchJSON<ProductSearchResult>(`/api/Product/by-category/${categoryId}?page=${page}&pageSize=${pageSize}`)
  } catch (e: any) {
    console.log('API –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// Simple version that returns just products array for category filtering
export async function fetchProductsByCategorySimple(categoryId: string): Promise<Product[]> {
  try {
    console.log('Fetching products for category:', categoryId)
    
    // Get all products for the category (with a large page size)
    const result = await fetchJSON<ProductSearchResult>(`/api/Product/by-category/${categoryId}?page=1&pageSize=1000`)
    
    console.log('API response:', result)
    
    // Check if result and products exist
    if (!result || !result.products) {
      console.log('No products found for category:', categoryId)
      return []
    }
    
    // Load categories to attach category info to products
    const categories = await getAllCategories()
    const categoryMap = new Map(categories.map(cat => [cat.id, cat]))
    
    // Add category information to each product
    const productsWithCategories = result.products.map(product => ({
      ...product,
      category: categoryMap.get(product.categoryId)
    }))
    
    console.log('Products with categories:', productsWithCategories)
    
    return productsWithCategories
  } catch (e: any) {
    console.log('API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    console.log('Error details:', e)
    
    // Fallback: try to get all products and filter by categoryId
    try {
      console.log('Trying fallback: fetch all products and filter by categoryId')
      const allProducts = await fetchProducts()
      const filteredProducts = allProducts.filter(product => product.categoryId === categoryId)
      console.log('Fallback result:', filteredProducts)
      return filteredProducts
    } catch (fallbackError) {
      console.log('Fallback also failed:', fallbackError)
      return []
    }
  }
}

// ===== AUTH API =====
export async function login(loginData: LoginDto): Promise<AuthResult> {
  try {
    const result = await fetchJSON<AuthResult>('/api/Auth/login', { 
      method: 'POST', 
      body: JSON.stringify(loginData) 
    })
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
    if (result.token && typeof window !== 'undefined') {
      localStorage.setItem('auth_token', result.token)
    }
    
    return result
  } catch (e: any) {
    console.log('API –ª–æ–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function register(registerData: RegisterDto): Promise<any> {
  try {
    return await fetchJSON('/api/Auth/register', { 
      method: 'POST', 
      body: JSON.stringify(registerData) 
    })
  } catch (e: any) {
    console.log('API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    return {
      succeeded: true,
      message: 'User registered successfully (mock)'
    }
  }
}

export async function logout(): Promise<void> {
  try {
    await fetchJSON('/api/Auth/logout', { method: 'POST' })
  } catch (e: any) {
    console.log('API –≤—ã—Ö–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
  } finally {
    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    if (typeof window !== 'undefined') {
      localStorage.removeItem('auth_token')
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export function isAuthenticated(): boolean {
  if (typeof window === 'undefined') return false
  return !!localStorage.getItem('auth_token')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
export function getCurrentToken(): string | null {
  return getAuthToken()
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export async function getCurrentUser(): Promise<any> {
  try {
    return await fetchJSON('/api/Auth/me')
  } catch (error: any) {
    console.log('API –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getBasket(customerId: string): Promise<any> {
  try {
    return await fetchJSON(`/api/Basket/${customerId}`)
  } catch (error: any) {
    console.log('API –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
export async function addToBasket(customerId: string, productId: string, quantity: number): Promise<any> {
  try {
    return await fetchJSON(`/api/Basket/${customerId}/items`, {
      method: 'POST',
      body: JSON.stringify({
        basketId: customerId, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ basketId = customerId
        productId,
        quantity
      })
    })
  } catch (error: any) {
    console.log('API –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
export async function removeFromBasket(customerId: string, productId: string, quantity: number): Promise<any> {
  try {
    return await fetchJSON(`/api/Basket/${customerId}/items?productId=${productId}&quantity=${quantity}`, {
      method: 'DELETE'
    })
  } catch (error: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
export async function updateBasketItem(customerId: string, productId: string, quantity: number): Promise<any> {
  try {
    return await fetchJSON('/api/Basket/items', {
      method: 'PUT',
      body: JSON.stringify({
        customerId,
        productId,
        quantity
      })
    })
  } catch (error: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
export async function clearBasket(customerId: string): Promise<any> {
  try {
    return await fetchJSON(`/api/Basket/${customerId}`, {
      method: 'DELETE'
    })
  } catch (error: any) {
    console.log('API –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    throw error
  }
}

// ===== CATEGORY API =====
export async function getAllCategories(): Promise<Category[]> {
  try {
    return await fetchJSON<Category[]>('/api/Category')
  } catch (e: any) {
    console.log('API –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getCategoryById(id: string): Promise<Category> {
  try {
    return await fetchJSON<Category>(`/api/Category/${id}`)
  } catch (e: any) {
    console.log('API –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function createCategory(categoryData: CategoryCreateDto): Promise<Category> {
  try {
    return await fetchJSON<Category>('/api/Category', { 
      method: 'POST', 
      body: JSON.stringify(categoryData) 
    })
  } catch (e: any) {
    console.log('API —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateCategory(id: string, categoryData: CategoryUpdateDto): Promise<Category> {
  try {
    return await fetchJSON<Category>(`/api/Category/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(categoryData) 
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteCategory(id: string): Promise<boolean> {
  try {
    await fetchJSON(`/api/Category/${id}`, { method: 'DELETE' })
    return true
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// ===== BASKET API =====
export async function getBasketByCustomerId(customerId: string): Promise<Basket> {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è customerId:', customerId)
    const basket = await fetchJSON<Basket>(`/api/Basket/${customerId}`)
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞:', basket)
    return basket
  } catch (e: any) {
    console.log('API –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', e.message)
    
    // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (500 –æ—à–∏–±–∫–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
    if (e.message.includes('500') || e.message.includes('Basket not found') || e.message.includes('404')) {
      return {
        id: '',
        customerId: customerId,
        basketItems: [], // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º basketItems –≤–º–µ—Å—Ç–æ items
        totalAmount: 0,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        isDeleted: false
      }
    }
    
    throw e
  }
}

export async function addItemsToBasket(customerId: string, items: BasketItemsCreateDto): Promise<void> {
  try {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', { customerId, items })
    await fetchJSON(`/api/Basket/${customerId}/items`, { 
      method: 'POST', 
      body: JSON.stringify(items) 
    })
    console.log('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É: ${e.message}`)
  }
}

export async function removeItemsFromBasket(customerId: string, productId: string, quantity: number): Promise<void> {
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', { customerId, productId, quantity })
    await fetchJSON(`/api/Basket/${customerId}/items?productId=${productId}&quantity=${quantity}`, { 
      method: 'DELETE' 
    })
    console.log('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ${e.message}`)
  }
}


export async function updateItemsInBasket(customerId: string, items: BasketItemsUpdateDto): Promise<void> {
  try {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', { customerId, items })
    await fetchJSON(`/api/Basket/${customerId}/items`, { 
      method: 'PUT', 
      body: JSON.stringify(items),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    console.log('–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', e.message)
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${e.message}`)
  }
}

// ===== CUSTOMER API =====
export async function getAllCustomers(): Promise<Customer[]> {
  try {
    return await fetchJSON<Customer[]>('/api/Customer')
  } catch (e: any) {
    console.log('API –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getCustomerById(id: string): Promise<Customer> {
  try {
    return await fetchJSON<Customer>(`/api/Customer/${id}`)
  } catch (e: any) {
    console.log('API –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateCustomer(id: string, customerData: CustomerUpdateDto): Promise<Customer> {
  try {
    return await fetchJSON<Customer>(`/api/Customer/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(customerData) 
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getAllCustomersWithOrders(page: number = 1, pageSize: number = 10): Promise<Customer[]> {
  try {
    return await fetchJSON<Customer[]>(`/api/Customer/with-orders?page=${page}&pageSize=${pageSize}`)
  } catch (e: any) {
    console.log('API –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getCustomerFullData(customerId: string): Promise<Customer> {
  try {
    return await fetchJSON<Customer>(`/api/Customer/full-data/${customerId}`)
  } catch (e: any) {
    console.log('API –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteCustomer(id: string): Promise<void> {
  try {
    await fetchJSON(`/api/Customer/${id}`, { method: 'DELETE' })
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// ===== ORDER API =====
export async function getAllOrders(): Promise<Order[]> {
  try {
    return await fetchJSON<Order[]>('/api/Order')
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getOrdersByCustomerId(customerId: string): Promise<Order[]> {
  try {
    return await fetchJSON<Order[]>(`/api/Order/customer/${customerId}`)
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–æ–≤ –ø–æ customerId –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    return []
  }
}

export async function getOrderById(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}`)
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function createOrder(orderData: OrderCreateDto): Promise<Order> {
  try {
    return await fetchJSON<Order>('/api/Order', { 
      method: 'POST', 
      body: JSON.stringify(orderData) 
    })
  } catch (e: any) {
    console.log('API —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateOrder(id: string, orderData: OrderUpdateDto): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(orderData) 
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteOrder(id: string): Promise<boolean> {
  try {
    await fetchJSON(`/api/Order/${id}`, { method: 'DELETE' })
    return true
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getOrdersByStatus(orderStatusId?: string, keyword?: string, page: number = 1, pageSize: number = 10): Promise<Order[]> {
  try {
    const params = new URLSearchParams()
    if (keyword) params.append('keyword', keyword)
    params.append('page', page.toString())
    params.append('pageSize', pageSize.toString())
    
    return await fetchJSON<Order[]>(`/api/Order/by-status/${orderStatusId || 'null'}?${params.toString()}`)
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function cancelOrder(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/cancel`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsDelivered(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/deliver`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsProcessing(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/processing`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsReturned(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/returned`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsShipped(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/shipped`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function setOrderStatus(id: string, orderStatusId: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/set-status/${orderStatusId}`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// ===== LEGACY FUNCTIONS (for backward compatibility) =====
export async function fetchTranslations(lang = "en"): Promise<Record<string, string>> {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ API –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±—ç–∫–µ–Ω–¥–µ
  const translations: Record<string, Record<string, string>> = {
    en: {
      'home.title': 'GreenZone - Premium Artificial Grass',
      'home.subtitle': 'Transform your space with our high-quality artificial grass solutions',
      'nav.catalog': 'Catalog',
      'nav.services': 'Services',
      'nav.about': 'About',
      'nav.contact': 'Contact',
      'nav.login': 'Login',
      'nav.register': 'Register',
      'nav.cart': 'Cart',
      'nav.profile': 'Profile',
      'product.price': 'Price',
      'product.add_to_cart': 'Add to Cart',
      'product.description': 'Description',
      'cart.title': 'Shopping Cart',
      'cart.empty': 'Your cart is empty',
      'cart.total': 'Total',
      'cart.checkout': 'Checkout',
      'auth.login': 'Login',
      'auth.register': 'Register',
      'auth.email': 'Email',
      'auth.password': 'Password',
      'auth.confirm_password': 'Confirm Password',
      'auth.submit': 'Submit',
      'products.title': 'Our Products',
      'products.order': 'Order Now',
      'products.viewAll': 'View All Products'
    },
    ru: {
      'home.title': 'GreenZone - –ü—Ä–µ–º–∏—É–º –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –¢—Ä–∞–≤–∞',
      'home.subtitle': '–ü—Ä–µ–æ–±—Ä–∞–∑–∏—Ç–µ –≤–∞—à–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –Ω–∞—à–∏–º–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç—Ä–∞–≤—ã',
      'nav.catalog': '–ö–∞—Ç–∞–ª–æ–≥',
      'nav.services': '–£—Å–ª—É–≥–∏',
      'nav.about': '–û –Ω–∞—Å',
      'nav.contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      'nav.login': '–í—Ö–æ–¥',
      'nav.register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      'nav.cart': '–ö–æ—Ä–∑–∏–Ω–∞',
      'nav.profile': '–ü—Ä–æ—Ñ–∏–ª—å',
      'product.price': '–¶–µ–Ω–∞',
      'product.add_to_cart': '–í –∫–æ—Ä–∑–∏–Ω—É',
      'product.description': '–û–ø–∏—Å–∞–Ω–∏–µ',
      'cart.title': '–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫',
      'cart.empty': '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
      'cart.total': '–ò—Ç–æ–≥–æ',
      'cart.checkout': '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
      'auth.login': '–í—Ö–æ–¥',
      'auth.register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      'auth.email': 'Email',
      'auth.password': '–ü–∞—Ä–æ–ª—å',
      'auth.confirm_password': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
      'auth.submit': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
      'products.title': '–ù–∞—à–∏ –ü—Ä–æ–¥—É–∫—Ç—ã',
      'products.order': '–ó–∞–∫–∞–∑–∞—Ç—å',
      'products.viewAll': '–í—Å–µ –ü—Ä–æ–¥—É–∫—Ç—ã'
    }
  }
  return translations[lang] || translations['en']
}

export async function request<T = any>(path: string, opts: RequestInit = {}) {
  return fetchJSON<T>(path, opts)
}

// ===== DELIVERY API =====
export async function getAllDeliveries(): Promise<DeliveryReadDto[]> {
  try {
    return await fetchJSON<DeliveryReadDto[]>('/api/Delivery')
  } catch (e: any) {
    console.log('API –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getDeliveriesByCustomerId(customerId: string): Promise<DeliveryReadDto[]> {
  try {
    return await fetchJSON<DeliveryReadDto[]>(`/api/Delivery/customer/${customerId}`)
  } catch (e: any) {
    console.log('API –¥–æ—Å—Ç–∞–≤–æ–∫ –ø–æ customerId –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    return []
  }
}

export async function getDeliveryById(id: string): Promise<DeliveryReadDto> {
  try {
    return await fetchJSON<DeliveryReadDto>(`/api/Delivery/${id}`)
  } catch (e: any) {
    console.log('API –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function createDelivery(deliveryData: DeliveryCreateDto): Promise<DeliveryReadDto> {
  try {
    return await fetchJSON<DeliveryReadDto>('/api/Delivery', { 
      method: 'POST', 
      body: JSON.stringify(deliveryData) 
    })
  } catch (e: any) {
    console.log('API —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateDelivery(id: string, deliveryData: DeliveryUpdateDto): Promise<DeliveryReadDto> {
  try {
    return await fetchJSON<DeliveryReadDto>(`/api/Delivery/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(deliveryData) 
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteDelivery(id: string): Promise<boolean> {
  try {
    await fetchJSON(`/api/Delivery/${id}`, { method: 'DELETE' })
    return true
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateDeliveryStatusById(id: string, status: DeliveryStatusType): Promise<void> {
  try {
    await fetchJSON(`/api/Delivery/${id}/status?status=${status}`, { method: 'PATCH' })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// ===== DELIVERY STATUS API =====
export async function getAllDeliveryStatuses(): Promise<DeliveryStatusReadDto[]> {
  try {
    return await fetchJSON<DeliveryStatusReadDto[]>('/api/DeliveryStatus')
  } catch (e: any) {
    console.log('API —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getDeliveryStatusById(id: string): Promise<DeliveryStatusReadDto> {
  try {
    return await fetchJSON<DeliveryStatusReadDto>(`/api/DeliveryStatus/${id}`)
  } catch (e: any) {
    console.log('API —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function createDeliveryStatus(statusData: DeliveryStatusCreateDto): Promise<DeliveryStatusReadDto> {
  try {
    return await fetchJSON<DeliveryStatusReadDto>('/api/DeliveryStatus', { 
      method: 'POST', 
      body: JSON.stringify(statusData) 
    })
  } catch (e: any) {
    console.log('API —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function updateDeliveryStatus(id: string, statusData: DeliveryStatusUpdateDto): Promise<DeliveryStatusReadDto> {
  try {
    return await fetchJSON<DeliveryStatusReadDto>(`/api/DeliveryStatus/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(statusData) 
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteDeliveryStatus(id: string): Promise<boolean> {
  try {
    await fetchJSON(`/api/DeliveryStatus/${id}`, { method: 'DELETE' })
    return true
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// ===== PRODUCT DOCUMENTS API =====
export async function uploadProductDocuments(id: string, documents: ProductDocuments[]): Promise<void> {
  try {
    await fetchJSON(`/api/Product/upload-documents/${id}`, { 
      method: 'POST', 
      body: JSON.stringify(documents) 
    })
  } catch (e: any) {
    console.log('API –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}