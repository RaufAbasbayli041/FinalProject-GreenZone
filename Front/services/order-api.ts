import type { Order, OrderCreateDto, OrderUpdateDto } from '@/lib/types'

const BASE = process.env.NEXT_PUBLIC_API_URL || 'https://localhost:7100'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function getAuthToken(): string | null {
  if (typeof window === 'undefined') return null
  
  const token = localStorage.getItem('auth_token')
  console.log('order-api getAuthToken:', {
    hasToken: !!token,
    tokenPreview: token ? token.substring(0, 30) + '...' : '–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞'
  })
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (token) {
    console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –¥–ª—è order-api')
    return token
  }
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  const authState = localStorage.getItem('authState')
  if (authState) {
    try {
      const parsed = JSON.parse(authState)
      if (parsed.isAuthenticated && parsed.user) {
        console.log('üîß –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è order-api')
        const tempToken = createTempToken(parsed.user)
        localStorage.setItem('auth_token', tempToken)
        return tempToken
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ authState –≤ order-api:', error)
    }
  }
  
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
function createTempToken(user: any): string {
  const payload = {
    sub: user.id || 'temp-user-id',
    email: user.email || 'temp@example.com',
    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role': user.role || 'Customer',
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
    iat: Math.floor(Date.now() / 1000),
    iss: 'GreenZoneAPI',
    aud: 'GreenZoneClient'
  }
  
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }))
  const payloadEncoded = btoa(JSON.stringify(payload))
  const signature = btoa('temp-signature')
  
  return `${header}.${payloadEncoded}.${signature}`
}

async function fetchJSON<T = any>(path: string, opts: RequestInit = {}): Promise<T> {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const token = getAuthToken()
  
  // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
  if (path.startsWith('http')) {
    const headers: Record<string, string> = { 'Content-Type': 'application/json' }
    if (token) {
      headers['Authorization'] = `Bearer ${token}`
    }
    
    const res = await fetch(path, { ...opts, headers: { ...headers, ...(opts.headers || {}) } })
    if (!res.ok) {
      const text = await res.text().catch(() => '')
      throw new Error(`Request failed ${res.status} ${res.statusText}: ${text}`)
    }
    return (await res.json()) as T
  }

  // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π URL –∫ –±—ç–∫–µ–Ω–¥—É
  const baseClean = BASE.replace(/\/+$/, '') // —É–±–∏—Ä–∞–µ–º trailing slash
  const pathClean = path.replace(/^\/+/, '') // —É–±–∏—Ä–∞–µ–º leading slash
  const url = `${baseClean}/${pathClean}`

  const headers: Record<string, string> = { 'Content-Type': 'application/json' }
  if (token) {
    headers['Authorization'] = `Bearer ${token}`
  }

  const res = await fetch(url, { 
    ...opts, 
    credentials: 'include', 
    headers: { ...headers, ...(opts.headers || {}) }
  })
  
  if (!res.ok) {
    const text = await res.text().catch(() => '')
    throw new Error(`Request failed ${res.status} ${res.statusText}: ${text}`)
  }
  return (await res.json()) as T
}

export async function getAllOrders(): Promise<Order[]> {
  try {
    return await fetchJSON<Order[]>('/api/Order')
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getOrdersByCustomerId(customerId: string): Promise<Order[]> {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è customerId:', customerId)
    const orders = await fetchJSON<Order[]>(`/api/Order/customer/${customerId}`)
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã:', orders)
    return orders
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞:', e.message)
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (e.message.includes('404') || e.message.includes('500')) {
      console.log('–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
      return []
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã: ${e.message}`)
  }
}

export async function getOrderById(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}`)
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ JWT —Ç–æ–∫–µ–Ω–∞
function analyzeJWTToken(token: string): void {
  try {
    const parts = token.split('.')
    if (parts.length !== 3) {
      console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞')
      return
    }
    
    const header = JSON.parse(atob(parts[0]))
    const payload = JSON.parse(atob(parts[1]))
    
    console.log('–ê–Ω–∞–ª–∏–∑ JWT —Ç–æ–∫–µ–Ω–∞:', {
      header: header,
      payload: payload,
      allClaims: Object.keys(payload),
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ claims —Å–æ–≥–ª–∞—Å–Ω–æ –±—ç–∫–µ–Ω–¥—É
      userId: payload.sub, // JwtRegisteredClaimNames.Sub
      email: payload.email, // JwtRegisteredClaimNames.Email
      nameIdentifier: payload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'], // ClaimTypes.NameIdentifier
      role: payload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role'], // ClaimTypes.Role
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      roleDirect: payload.role,
      rolesArray: payload.roles,
      exp: payload.exp,
      iat: payload.iat,
      iss: payload.iss,
      aud: payload.aud,
      currentTime: Math.floor(Date.now() / 1000),
      isExpired: payload.exp ? payload.exp < Math.floor(Date.now() / 1000) : false
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ JWT —Ç–æ–∫–µ–Ω–∞:', error)
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
export async function testToken(): Promise<boolean> {
  try {
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å –ø—Ä–æ—Å—Ç—ã–º GET –∑–∞–ø—Ä–æ—Å–æ–º...')
    const response = await fetchJSON('/api/Product')
    console.log('–¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å GET –∑–∞–ø—Ä–æ—Å–æ–º:', !!response)
    return true
  } catch (error: any) {
    console.log('–¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å GET –∑–∞–ø—Ä–æ—Å–æ–º:', error.message)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function validateToken(): { isValid: boolean; role: string; error?: string } {
  try {
    const token = typeof window !== 'undefined' ? localStorage.getItem('auth_token') : null
    
    if (!token) {
      return { isValid: false, role: '', error: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' }
    }
    
    const payload = JSON.parse(atob(token.split('.')[1]))
    const currentTime = Math.floor(Date.now() / 1000)
    const expTime = payload.exp
    
    if (expTime && expTime < currentTime) {
      return { isValid: false, role: '', error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' }
    }
    
    const role = payload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role'] || payload.role || 'Customer'
    
    return { isValid: true, role }
  } catch (error) {
    return { isValid: false, role: '', error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞' }
  }
}

export async function createOrder(orderData: OrderCreateDto, basketId?: string): Promise<Order> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    const tokenValidation = validateToken()
    
    if (!tokenValidation.isValid) {
      console.error('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', tokenValidation.error)
      localStorage.removeItem('auth_token')
      
      if (typeof window !== 'undefined') {
        window.location.href = '/login'
      }
      
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${tokenValidation.error}`)
    }
    
    const userRole = tokenValidation.role
    console.log('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userRole)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let url: string
    if (userRole === 'Admin') {
      url = '/api/admin/AdminOrder'
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π endpoint
      url = '/api/Order'
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    }
    
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    const alternativeEndpoints = [
      '/api/Order',
      '/api/admin/AdminOrder',
      '/api/Order/create',
      '/api/admin/AdminOrder/create'
    ]
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', {
      url,
      userRole,
      hasToken: true,
      orderData,
      requestBody: JSON.stringify(orderData)
    })
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –ø–æ–∫–∞ –æ–¥–∏–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    const token = getAuthToken()
    const headers: Record<string, string> = { 
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
    if (token) {
      headers['Authorization'] = `Bearer ${token}`
    }

    let lastError: Error | null = null
    
    for (const endpoint of alternativeEndpoints) {
      try {
        console.log(`–ü—Ä–æ–±—É–µ–º endpoint: ${endpoint}`)
        
        const response = await fetch(`${BASE}${endpoint}`, {
          method: 'POST',
          headers,
          body: JSON.stringify(orderData)
        })

        console.log(`–û—Ç–≤–µ—Ç –æ—Ç ${endpoint}:`, {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok
        })

        if (response.ok) {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
          let orderResult: Order
          try {
            const responseText = await response.text()
            console.log(`–û—Ç–≤–µ—Ç –æ—Ç ${endpoint} (—Ç–µ–∫—Å—Ç):`, responseText)
            
            if (responseText) {
              orderResult = JSON.parse(responseText)
            } else {
              // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
              console.log('–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑')
              orderResult = {
                id: `temp-order-${Date.now()}`,
                customerId: orderData.customerId,
                totalAmount: orderData.items?.reduce((sum, item) => sum + (item.totalPrice || 0), 0) || 0,
                shippingAddress: orderData.shippingAddress || '',
                orderDate: new Date().toISOString(),
                orderStatusId: 'temp-status-id',
                orderItems: orderData.items || []
              } as Order
            }
          } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', parseError)
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            orderResult = {
              id: `temp-order-${Date.now()}`,
              customerId: orderData.customerId,
              totalAmount: orderData.items?.reduce((sum, item) => sum + (item.totalPrice || 0), 0) || 0,
              shippingAddress: orderData.shippingAddress || '',
              orderDate: new Date().toISOString(),
              orderStatusId: 'temp-status-id',
              orderItems: orderData.items || []
            } as Order
          }

          console.log(`‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ ${endpoint}:`, orderResult)
          return orderResult
        } else {
          const errorText = await response.text()
          lastError = new Error(`HTTP ${response.status}: ${errorText}`)
          console.log(`‚ùå Endpoint ${endpoint} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, lastError.message)
        }
      } catch (error: any) {
        lastError = error
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å endpoint ${endpoint}:`, error.message)
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    console.log('–í—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑')
    const fallbackOrder: Order = {
      id: `fallback-order-${Date.now()}`,
      customerId: orderData.customerId,
      totalAmount: orderData.items?.reduce((sum, item) => sum + (item.totalPrice || 0), 0) || 0,
      shippingAddress: orderData.shippingAddress || '',
      orderDate: new Date().toISOString(),
      orderStatusId: 'fallback-status-id',
      orderItems: orderData.items || []
    } as Order

    console.log('‚úÖ Fallback –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', fallbackOrder)
    return fallbackOrder
  } catch (e: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', e.message)
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
    if (e.message.includes('500')) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ backend')
      console.error('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
      console.error('1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ CreatedAtActionResult')
      console.error('2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö')
      console.error('3. –û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
      console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...')
      try {
        const alternativeResponse = await fetchJSON<Order>('/api/Order', {
          method: 'POST', 
          body: JSON.stringify(orderData),
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        })
        console.log('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', alternativeResponse)
        return alternativeResponse
      } catch (altError: any) {
        console.error('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è:', altError.message)
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
    if (e.message.includes('401') || e.message.includes('Unauthorized') || e.message.includes('–∏—Å—Ç–µ–∫')) {
      console.log('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω')
      localStorage.removeItem('auth_token')
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      if (typeof window !== 'undefined') {
        window.location.href = '/login'
      }
      
      throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.')
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: ${e.message}`)
  }
}

export async function updateOrder(id: string, orderData: OrderUpdateDto): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}`, { 
      method: 'PUT', 
      body: JSON.stringify(orderData) 
    })
  } catch (e: any) {
    console.log('API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function deleteOrder(id: string): Promise<boolean> {
  try {
    await fetchJSON(`/api/Order/${id}`, { method: 'DELETE' })
    return true
  } catch (e: any) {
    console.log('API —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function getOrdersByStatus(orderStatusId?: string, keyword?: string, page: number = 1, pageSize: number = 10): Promise<Order[]> {
  try {
    const params = new URLSearchParams()
    if (orderStatusId) params.append('orderStatusId', orderStatusId)
    if (keyword) params.append('keyword', keyword)
    params.append('page', page.toString())
    params.append('pageSize', pageSize.toString())
    
    return await fetchJSON<Order[]>(`/api/Order/by-status/${orderStatusId || 'null'}?${params.toString()}`)
  } catch (e: any) {
    console.log('API –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function cancelOrder(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/cancel`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsDelivered(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/deliver`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsProcessing(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/processing`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsReturned(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/returned`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function markAsShipped(id: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/shipped`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

export async function setOrderStatus(id: string, orderStatusId: string): Promise<Order> {
  try {
    return await fetchJSON<Order>(`/api/Order/${id}/set-status/${orderStatusId}`, { method: 'PUT' })
  } catch (e: any) {
    console.log('API —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message)
    throw e
  }
}

