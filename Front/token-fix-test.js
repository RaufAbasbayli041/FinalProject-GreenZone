// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º
console.log('üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º');

function testTokenFix() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  const token = localStorage.getItem('auth_token');
  const authState = localStorage.getItem('authState');
  
  console.log('–¢–æ–∫–µ–Ω:', token ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authState ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  
  if (authState) {
    try {
      const parsed = JSON.parse(authState);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', parsed.isAuthenticated ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
      if (parsed.user) {
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          id: parsed.user.id,
          name: parsed.user.name,
          email: parsed.user.email,
          role: parsed.user.role
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ authState:', error);
    }
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  if (!token && authState) {
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
    try {
      const parsed = JSON.parse(authState);
      if (parsed.isAuthenticated && parsed.user) {
        const tempPayload = {
          sub: parsed.user.id || 'temp-user-id',
          email: parsed.user.email || 'temp@example.com',
          'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role': parsed.user.role || 'Customer',
          exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
          iat: Math.floor(Date.now() / 1000),
          iss: 'GreenZoneAPI',
          aud: 'GreenZoneClient'
        };
        
        const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
        const payload = btoa(JSON.stringify(tempPayload));
        const signature = btoa('temp-signature');
        const tempToken = `${header}.${payload}.${signature}`;
        
        localStorage.setItem('auth_token', tempToken);
        console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        console.log('–¢–æ–∫–µ–Ω:', tempToken.substring(0, 50) + '...');
        
        return tempToken;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
    }
  }
  
  return token;
}

function testBasketAccess() {
  console.log('\nüõí –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ:');
  
  const token = localStorage.getItem('auth_token');
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    return;
  }
  
  console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∫–æ—Ä–∑–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞');
  console.log('üìù –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
}

function testOrderCreation() {
  console.log('\nüì¶ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:');
  
  const token = localStorage.getItem('auth_token');
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    return;
  }
  
  console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ');
  console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
}

function simulateLogin() {
  console.log('\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–Ω–∞:');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const testUser = {
    id: 'test-user-123',
    name: 'Test User',
    email: 'test@example.com',
    role: 'Customer'
  };
  
  const authState = {
    user: testUser,
    isAuthenticated: true
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  localStorage.setItem('authState', JSON.stringify(authState));
  console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
  const tempPayload = {
    sub: testUser.id,
    email: testUser.email,
    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role': testUser.role,
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
    iat: Math.floor(Date.now() / 1000),
    iss: 'GreenZoneAPI',
    aud: 'GreenZoneClient'
  };
  
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
  const payload = btoa(JSON.stringify(tempPayload));
  const signature = btoa('temp-signature');
  const tempToken = `${header}.${payload}.${signature}`;
  
  localStorage.setItem('auth_token', tempToken);
  console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
  console.log('–¢–æ–∫–µ–Ω:', tempToken.substring(0, 50) + '...');
  
  console.log('\nüéâ –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
  console.log('1. –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É');
  console.log('2. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
  console.log('3. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.tokenTest = {
  testTokenFix,
  testBasketAccess,
  testOrderCreation,
  simulateLogin
};

console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('- tokenTest.testTokenFix() - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
console.log('- tokenTest.testBasketAccess() - –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ');
console.log('- tokenTest.testOrderCreation() - –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
console.log('- tokenTest.simulateLogin() - –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–Ω–∞');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
const token = testTokenFix();
if (token) {
  testBasketAccess();
  testOrderCreation();
} else {
  console.log('\nüí° –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ tokenTest.simulateLogin() –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
}
