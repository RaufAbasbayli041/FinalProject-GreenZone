// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ endpoints
console.log('üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');

async function testOrderCreation() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  const token = localStorage.getItem('auth_token');
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º customerId
  const authState = localStorage.getItem('authState');
  if (!authState) {
    console.log('‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  try {
    const parsed = JSON.parse(authState);
    const userId = parsed.user?.id;
    if (!userId) {
      console.log('‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('‚úÖ userId –Ω–∞–π–¥–µ–Ω:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º customerId
    const response = await fetch(`https://localhost:7100/api/Customer/by-user/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è customerId:', response.status);
      return;
    }
    
    const customer = await response.json();
    const customerId = customer.id;
    console.log('‚úÖ customerId –Ω–∞–π–¥–µ–Ω:', customerId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    const basketResponse = await fetch(`https://localhost:7100/api/Basket/${customerId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!basketResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', basketResponse.status);
      return;
    }
    
    const basket = await basketResponse.json();
    console.log('–ö–æ—Ä–∑–∏–Ω–∞:', {
      id: basket.id,
      itemsCount: basket.basketItems?.length || 0,
      items: basket.basketItems?.map(item => ({
        productId: item.productId,
        quantity: item.quantity
      })) || []
    });
    
    if (!basket.basketItems || basket.basketItems.length === 0) {
      console.log('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const testOrderData = {
      customerId: customerId,
      shippingAddress: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
      items: basket.basketItems.map(item => ({
        productId: item.productId,
        quantity: item.quantity,
        unitPrice: item.product?.pricePerSquareMeter || 100,
        totalPrice: item.totalPrice || (item.quantity * 100)
      }))
    };
    
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', testOrderData);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
    const endpoints = [
      '/api/Order',
      '/api/admin/AdminOrder',
      '/api/Order/create',
      '/api/admin/AdminOrder/create'
    ];
    
    for (const endpoint of endpoints) {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: ${endpoint}`);
      
      try {
        const orderResponse = await fetch(`https://localhost:7100${endpoint}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(testOrderData)
        });
        
        console.log(`–û—Ç–≤–µ—Ç –æ—Ç ${endpoint}:`, {
          status: orderResponse.status,
          statusText: orderResponse.statusText,
          ok: orderResponse.ok
        });
        
        if (orderResponse.ok) {
          const responseText = await orderResponse.text();
          console.log(`‚úÖ ${endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç:`, responseText);
          
          if (responseText) {
            try {
              const orderData = JSON.parse(responseText);
              console.log('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', orderData);
            } catch (parseError) {
              console.log('–û—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω');
            }
          } else {
            console.log('–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –Ω–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω');
          }
          
          return; // –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–∫–∞–∑
        } else {
          const errorText = await orderResponse.text();
          console.log(`‚ùå ${endpoint} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, errorText);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å ${endpoint}:`, error.message);
      }
    }
    
    console.log('\n‚ùå –í—Å–µ endpoints –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

function createTestOrder() {
  console.log('\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
  const testOrderData = {
    customerId: '89e0314f-c639-4a53-ac64-b555a702a317', // –ò–∑ –ª–æ–≥–æ–≤
    shippingAddress: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
    items: [
      {
        productId: 'da83d42d-1208-4f6c-b8b9-6863eaf467cd', // –ò–∑ –ª–æ–≥–æ–≤
        quantity: 1,
        unitPrice: 100,
        totalPrice: 100
      }
    ]
  };
  
  console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', testOrderData);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
  fetch('https://localhost:7100/api/Order', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
    },
    body: JSON.stringify(testOrderData)
  })
  .then(response => {
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok
    });
    
    if (response.ok) {
      return response.text();
    } else {
      return response.text().then(text => {
        throw new Error(`HTTP ${response.status}: ${text}`);
      });
    }
  })
  .then(data => {
    console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', data);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
  });
}

function checkBackendEndpoints() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints:');
  
  const endpoints = [
    '/api/Order',
    '/api/admin/AdminOrder',
    '/api/Basket',
    '/api/Customer',
    '/api/Product'
  ];
  
  endpoints.forEach(endpoint => {
    fetch(`https://localhost:7100${endpoint}`)
      .then(response => {
        console.log(`${endpoint}: ${response.ok ? '‚úÖ' : '‚ùå'} (${response.status})`);
      })
      .catch(error => {
        console.log(`${endpoint}: ‚ùå (${error.message})`);
      });
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.orderTest = {
  testOrderCreation,
  createTestOrder,
  checkBackendEndpoints
};

console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('- orderTest.testOrderCreation() - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
console.log('- orderTest.createTestOrder() - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑');
console.log('- orderTest.checkBackendEndpoints() - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoints');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkBackendEndpoints();
