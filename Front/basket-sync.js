// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã');

async function syncBasketWithServer() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  const token = localStorage.getItem('auth_token');
  if (!token) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º customerId
  const authState = localStorage.getItem('authState');
  if (!authState) {
    console.log('‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  try {
    const parsed = JSON.parse(authState);
    const userId = parsed.user?.id;
    if (!userId) {
      console.log('‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('‚úÖ userId –Ω–∞–π–¥–µ–Ω:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º customerId
    const response = await fetch(`https://localhost:7100/api/Customer/user/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è customerId:', response.status);
      return;
    }
    
    const customer = await response.json();
    const customerId = customer.id;
    console.log('‚úÖ customerId –Ω–∞–π–¥–µ–Ω:', customerId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('\nüõí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:');
    const basketResponse = await fetch(`https://localhost:7100/api/Basket/customer/${customerId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!basketResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', basketResponse.status);
      return;
    }
    
    const serverBasket = await basketResponse.json();
    console.log('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', {
      id: serverBasket.id,
      itemsCount: serverBasket.basketItems?.length || 0,
      items: serverBasket.basketItems?.map(item => ({
        productId: item.productId,
        quantity: item.quantity
      })) || []
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã:');
    const cartState = localStorage.getItem('cartState');
    if (cartState) {
      try {
        const parsed = JSON.parse(cartState);
        console.log('–õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', {
          itemsCount: parsed.items?.length || 0,
          items: parsed.items?.map(item => ({
            productId: item.productId,
            quantity: item.quantity
          })) || []
        });
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—ã
        const serverItemsCount = serverBasket.basketItems?.length || 0;
        const localItemsCount = parsed.items?.length || 0;
        
        console.log('\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω:');
        console.log('–°–µ—Ä–≤–µ—Ä:', serverItemsCount, '—Ç–æ–≤–∞—Ä–æ–≤');
        console.log('–õ–æ–∫–∞–ª—å–Ω–æ:', localItemsCount, '—Ç–æ–≤–∞—Ä–æ–≤');
        
        if (serverItemsCount === 0 && localItemsCount > 0) {
          console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
          
          for (const item of parsed.items) {
            try {
              const addResponse = await fetch(`https://localhost:7100/api/Basket/${customerId}/items`, {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify([{
                  productId: item.productId,
                  quantity: item.quantity
                }])
              });
              
              if (addResponse.ok) {
                console.log(`‚úÖ –¢–æ–≤–∞—Ä ${item.productId} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
              } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}:`, addResponse.status);
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}:`, error);
            }
          }
          
          console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } else if (serverItemsCount > 0 && localItemsCount === 0) {
          console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É —Å –ª–æ–∫–∞–ª—å–Ω–æ–π...');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
          const updatedCartState = {
            items: serverBasket.basketItems.map(item => ({
              productId: item.productId,
              quantity: item.quantity
            }))
          };
          
          localStorage.setItem('cartState', JSON.stringify(updatedCartState));
          console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } else if (serverItemsCount === localItemsCount) {
          console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } else {
          console.log('‚ö†Ô∏è –ö–æ—Ä–∑–∏–Ω—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤');
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã:', error);
      }
    } else {
      console.log('‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }
}

function clearBasket() {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã:');
  
  // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
  localStorage.removeItem('cartState');
  console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
  
  // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const token = localStorage.getItem('auth_token');
  const authState = localStorage.getItem('authState');
  
  if (token && authState) {
    try {
      const parsed = JSON.parse(authState);
      const userId = parsed.user?.id;
      
      if (userId) {
        // –ü–æ–ª—É—á–∞–µ–º customerId
        fetch(`https://localhost:7100/api/Customer/user/${userId}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(customer => {
          const customerId = customer.id;
          
          // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          fetch(`https://localhost:7100/api/Basket/${customerId}/clear`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          })
          .then(response => {
            if (response.ok) {
              console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ—á–∏—â–µ–Ω–∞');
            } else {
              console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', response.status);
            }
          })
          .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
          });
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è customerId:', error);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ authState:', error);
    }
  }
}

function testBasketSync() {
  console.log('\nüß™ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
  console.log('–¢–æ–∫–µ–Ω:', localStorage.getItem('auth_token') ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', localStorage.getItem('authState') ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
  console.log('–ö–æ—Ä–∑–∏–Ω–∞:', localStorage.getItem('cartState') ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  syncBasketWithServer();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.basketSync = {
  syncBasketWithServer,
  clearBasket,
  testBasketSync
};

console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('- basketSync.syncBasketWithServer() - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É');
console.log('- basketSync.clearBasket() - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É');
console.log('- basketSync.testBasketSync() - –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBasketSync();
