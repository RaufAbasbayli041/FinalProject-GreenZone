// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');

function restoreToken() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authState = localStorage.getItem('authState');
  if (authState) {
    try {
      const parsed = JSON.parse(authState);
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', parsed);
      
      if (parsed.isAuthenticated && !localStorage.getItem('auth_token')) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('üîß –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const user = parsed.user;
        if (user) {
          const tempPayload = {
            sub: user.id || 'temp-user-id',
            email: user.email || 'temp@example.com',
            'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role': user.role || 'Customer',
            exp: Math.floor(Date.now() / 1000) + 3600, // 1 —á–∞—Å
            iat: Math.floor(Date.now() / 1000),
            iss: 'GreenZoneAPI',
            aud: 'GreenZoneClient'
          };
          
          const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
          const payload = btoa(JSON.stringify(tempPayload));
          const signature = btoa('temp-signature');
          const tempToken = `${header}.${payload}.${signature}`;
          
          localStorage.setItem('auth_token', tempToken);
          console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
          console.log('–¢–æ–∫–µ–Ω:', tempToken.substring(0, 50) + '...');
          
          return tempToken;
        }
      } else if (parsed.isAuthenticated && localStorage.getItem('auth_token')) {
        console.log('‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å');
        return localStorage.getItem('auth_token');
      } else {
        console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    }
  } else {
    console.log('‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  return null;
}

function forceReauth() {
  console.log('\nüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:');
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  localStorage.removeItem('auth_token');
  localStorage.removeItem('authState');
  
  console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
  console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
  console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞');
  console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è');
}

function testTokenAfterRestore() {
  console.log('\nüß™ –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:');
  
  const token = localStorage.getItem('auth_token');
  if (token) {
    console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', token.substring(0, 50) + '...');
    
    try {
      const parts = token.split('.');
      if (parts.length === 3) {
        const payload = JSON.parse(atob(parts[1]));
        console.log('Payload —Ç–æ–∫–µ–Ω–∞:', payload);
        
        const currentTime = Math.floor(Date.now() / 1000);
        const isExpired = payload.exp ? payload.exp < currentTime : false;
        
        console.log('–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', !isExpired);
        console.log('–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:', payload.exp ? Math.floor((payload.exp - currentTime) / 60) + ' –º–∏–Ω—É—Ç' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:', error);
    }
  } else {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.tokenRestore = {
  restoreToken,
  forceReauth,
  testTokenAfterRestore
};

console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('- tokenRestore.restoreToken() - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
console.log('- tokenRestore.forceReauth() - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
console.log('- tokenRestore.testTokenAfterRestore() - –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
const restoredToken = restoreToken();
if (restoredToken) {
  console.log('\nüéâ –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ—Å—Ç–∏—Ä—É–µ–º...');
  testTokenAfterRestore();
} else {
  console.log('\nüí° –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.');
}
